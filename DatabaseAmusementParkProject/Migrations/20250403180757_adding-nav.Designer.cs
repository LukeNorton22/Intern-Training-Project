// <auto-generated />
using System;
using DatabaseAmusementParkProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseAmusementParkProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250403180757_adding-nav")]
    partial class addingnav
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.ThemePark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ThemeParks");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.ThemePark_Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThemeParkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ThemeParkId");

                    b.ToTable("ThemeParks_Locations");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.ThemePark_Reviews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("ThemeParkLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ThemeParkLocationId");

                    b.HasIndex("UserId");

                    b.ToTable("ThemeParks_Review");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.ThemePark_Location", b =>
                {
                    b.HasOne("DatabaseAmusementParkProject.Entities.Location", "Location")
                        .WithMany("ThemePark_Locations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAmusementParkProject.Entities.ThemePark", "ThemePark")
                        .WithMany("ThemePark_Locations")
                        .HasForeignKey("ThemeParkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("ThemePark");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.ThemePark_Reviews", b =>
                {
                    b.HasOne("DatabaseAmusementParkProject.Entities.ThemePark_Location", "ThemeParkLocation")
                        .WithMany()
                        .HasForeignKey("ThemeParkLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseAmusementParkProject.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThemeParkLocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.Location", b =>
                {
                    b.Navigation("ThemePark_Locations");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.ThemePark", b =>
                {
                    b.Navigation("ThemePark_Locations");
                });

            modelBuilder.Entity("DatabaseAmusementParkProject.Entities.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
